// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	name_enrich "name-enrich"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnrich is a mock of Enrich interface.
type MockEnrich struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichMockRecorder
}

// MockEnrichMockRecorder is the mock recorder for MockEnrich.
type MockEnrichMockRecorder struct {
	mock *MockEnrich
}

// NewMockEnrich creates a new mock instance.
func NewMockEnrich(ctrl *gomock.Controller) *MockEnrich {
	mock := &MockEnrich{ctrl: ctrl}
	mock.recorder = &MockEnrichMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrich) EXPECT() *MockEnrichMockRecorder {
	return m.recorder
}

// EnrichAge mocks base method.
func (m *MockEnrich) EnrichAge(p *name_enrich.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichAge", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrichAge indicates an expected call of EnrichAge.
func (mr *MockEnrichMockRecorder) EnrichAge(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichAge", reflect.TypeOf((*MockEnrich)(nil).EnrichAge), p)
}

// EnrichGender mocks base method.
func (m *MockEnrich) EnrichGender(p *name_enrich.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichGender", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrichGender indicates an expected call of EnrichGender.
func (mr *MockEnrichMockRecorder) EnrichGender(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichGender", reflect.TypeOf((*MockEnrich)(nil).EnrichGender), p)
}

// EnrichNationality mocks base method.
func (m *MockEnrich) EnrichNationality(p *name_enrich.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrichNationality", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnrichNationality indicates an expected call of EnrichNationality.
func (mr *MockEnrichMockRecorder) EnrichNationality(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrichNationality", reflect.TypeOf((*MockEnrich)(nil).EnrichNationality), p)
}

// MockInsertService is a mock of InsertService interface.
type MockInsertService struct {
	ctrl     *gomock.Controller
	recorder *MockInsertServiceMockRecorder
}

// MockInsertServiceMockRecorder is the mock recorder for MockInsertService.
type MockInsertServiceMockRecorder struct {
	mock *MockInsertService
}

// NewMockInsertService creates a new mock instance.
func NewMockInsertService(ctrl *gomock.Controller) *MockInsertService {
	mock := &MockInsertService{ctrl: ctrl}
	mock.recorder = &MockInsertServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertService) EXPECT() *MockInsertServiceMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockInsertService) CreatePerson(p name_enrich.Person) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockInsertServiceMockRecorder) CreatePerson(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockInsertService)(nil).CreatePerson), p)
}

// MockReceiptService is a mock of ReceiptService interface.
type MockReceiptService struct {
	ctrl     *gomock.Controller
	recorder *MockReceiptServiceMockRecorder
}

// MockReceiptServiceMockRecorder is the mock recorder for MockReceiptService.
type MockReceiptServiceMockRecorder struct {
	mock *MockReceiptService
}

// NewMockReceiptService creates a new mock instance.
func NewMockReceiptService(ctrl *gomock.Controller) *MockReceiptService {
	mock := &MockReceiptService{ctrl: ctrl}
	mock.recorder = &MockReceiptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiptService) EXPECT() *MockReceiptServiceMockRecorder {
	return m.recorder
}

// ReceiptPerson mocks base method.
func (m *MockReceiptService) ReceiptPerson(id int) (name_enrich.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiptPerson", id)
	ret0, _ := ret[0].(name_enrich.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiptPerson indicates an expected call of ReceiptPerson.
func (mr *MockReceiptServiceMockRecorder) ReceiptPerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiptPerson", reflect.TypeOf((*MockReceiptService)(nil).ReceiptPerson), id)
}
